				;file D:\IIIT\Documents\HTK_Project\acc\acc.c
				;1	// PROGRAM	: 2-4.c								2014.0101
				;2	// FUNCTION	: STM PWM Servo Control with 		By Steven
				;3	#include <HT66F70A.h>
				;4	#define	 SW_DutyUpPU	_pepu6		//PEPU.6
				;5	#define	 SW_DutyUp		_pe6		//PE.6
				;6	#define	 SW_DutyUpC		_pec6		//PEC.6
				;7	#define	 SW_DutyDnPU	_pepu7		//PEPU.7
				;8	#define	 SW_DutyDn		_pe7		//PE.7
				;9	#define	 SW_DutyDnC		_pec7		//PEC.7
				;10	typedef	unsigned char	u8;
				;11	typedef	char			s8;
				;12	typedef	unsigned short	u16;
				;13	typedef	short			s16;
				;14	typedef	unsigned long	u32;
				;15	typedef	long			s32;
				;16	
				;17	void Delay100us(u16);							//函式原型宣告		 
				;18	void main()
				;19	{	s16 temp,Index=0;
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	2802	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0002	0F00	mov     a, 0H
0003	008B	mov     BP, a
0004	282C	jmp     _main
				;20		_wdtc=0b10101111;							//關閉看們狗計時器
				_main:
				_main:
002C	0FAF	mov     a, AFH
002D	00BE	mov     WDTC, a
				;21		SW_DutyUpC=1; SW_DutyUpPU=1;			   	//規劃按鍵腳位為輸入屬性並啟用提升電阻
002E	3323	set     PEC6
002F	3321	set     PEPU6
				;22		SW_DutyDnC=1; SW_DutyDnPU=1;		   	
0030	33A3	set     PEC7
0031	33A1	set     PEPU7
				;23		_psc0=0x01; _tbc0=0x85;_tb0e=1;				//fTB=fSYS/4,週期=8192*fTB,致能TB0中斷	
0032	0F01	mov     a, 1H
0033	00E4	mov     PSC0, a
0034	0F85	mov     a, 85H
0035	00E5	mov     TBC0, a
0036	30B2	set     TB0E
				;24		_pcs1=0x10; _pcs2=0x01;						//設定PC3/PC4為TP2功能
0037	0F10	mov     a, 10H
0038	80E9	lmov    PCS1, a
003A	0F01	mov     a, 1H
003B	80EA	lmov    PCS2, a
				;25		_tm2c0=0b00000000;							//fINT=fSYS(8MHz)/4 (0.5us)
003D	1F51	clr     TM2C0
				;26		_tm2c1=0b10101000;							//PWM/Active High/TM2R控制週期
003E	0FA8	mov     a, A8H
003F	00D2	mov     TM2C1, a
				;27		_tm2rp=160;									//週期=256*160*0.5us=20.48ms
0040	0FA0	mov     a, A0H
0041	00D7	mov     TM2RP, a
				;28		_t2on=1; _emi=1;							//起始TM1計數並致能EMI
0042	31D1	set     T2ON
0043	3030	set     EMI
				;29		while(1)
				;30		{	temp=Index*20+1000;						//轉換為佔空比參數
				_L8:
0046	4701	mov     a, rb
0047	4083	mov     del, a
0048	4702	mov     a, rc
0049	4084	mov     del[1], a
004A	0F14	mov     a, 14H
004B	4085	mov     del[2], a
004C	5F06	clr     del[3]
004D	2019	call    L0019
004E	4707	mov     a, del[4]
004F	4081	mov     rb, a
0050	4708	mov     a, del[5]
0051	4082	mov     rc, a
0052	0FE8	mov     a, E8H
0053	4381	addm    a, rb
0054	0F03	mov     a, 3H
0055	5382	adcm    a, rc
				;31			_tm2al=temp%256;						//設定佔空比參數
0056	4701	mov     a, rb
0057	0EF8	and     a, F8H
0058	00D5	mov     TM2AL, a
				;32			_tm2ah=temp/256;					
0059	4702	mov     a, rc
005A	00D6	mov     TM2AH, a
				;33			temp>>=1;								//轉換為Ton時間
				;34			Delay100us(12);						//延遲120ms
005B	0F0C	mov     a, CH
005C	4083	mov     del, a
005D	5F04	clr     del[1]
005E	2005	call    _Delay100us
				;35			while(1)
				;36			{	if(!SW_DutyUp)
				_L10:
005F	3F22	sz      PE6
0060	2865	jmp     _L13
				;37				{	Index=200;		//若按下遞增鍵,指標遞增(上限200) 
0061	0FC8	mov     a, C8H
0062	4081	mov     rb, a
0063	5F02	clr     rc
0064	2846	jmp     _L8
				;38					break;   	
				;39				}
				;40				if(!SW_DutyDn) 						//若按下遞減鍵,指標遞減(下限0) 
				_L13:
0065	3FA2	sz      PE7
0066	285F	jmp     _L10
0067	2844	jmp     _L12
0068	2868	jmp     $
				;41				{	Index=0;
				_L12:
0044	5F01	clr     rb
0045	5F02	clr     rc
				;42					break;   	
				;43				}
				;44			}
				;45		}
				;46	}
				;47	void Delay100us(u16 del)						//延遲del*200指令週期
				;48	{	u16 i,j;									//@fSYS=8MH,延遲del*100us
				;49		for(i=0;i<del;i++)
				_Delay100us:
				_Delay100us:
0005	5F01	clr     rb
0006	5F02	clr     rc
				_L2:
0007	4701	mov     a, rb
0008	4203	sub     a, del[0]
0009	4702	mov     a, rc
000A	5204	sbc     a, del[1]
000B	3F0A	sz      CZ
000C	2818	jmp     _L1
000D	5F00	clr     ra
0014	5481	inc     rb
0015	3D0A	sz      Z
0016	5482	inc     rc
0017	2807	jmp     _L2
				_L1:
0018	0003	ret
				L0019:
0019	5F07	clr     del[4]
001A	5F08	clr     del[5]
				L001B:
001B	7805	snz     del[2].0
001C	2821	jmp     L0021
001D	4703	mov     a, del[0]
001E	4387	addm    a, del[4]
001F	4704	mov     a, del[1]
0020	5388	adcm    a, del[5]
				L0021:
0021	340A	clr     C
0022	5A83	rlc     del[0]
0023	5A84	rlc     del[1]
0024	340A	clr     C
0025	5B86	rrc     del[3]
0026	5B85	rrc     del[2]
0027	4705	mov     a, del[2]
0028	4506	or      a, del[3]
0029	390A	snz     Z
002A	281B	jmp     L001B
002B	0003	ret
				;50			for(j=0;j<=25;j++) GCC_NOP();
				_L5:
000E	0000	nop
000F	5480	inc     ra
0010	4700	mov     a, ra
0011	0A1A	sub     a, 1AH
0012	390A	snz     Z
0013	280E	jmp     _L5
				;51	}
				data .SECTION 'DATA'
				__pepu DB DUP (?) ; __pepu
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				__intc0 DB DUP (?) ; __intc0
				__intc2 DB DUP (?) ; __intc2
				__wdtc DB DUP (?) ; __wdtc
				__tm2c0 DB DUP (?) ; __tm2c0
				__tm2c1 DB DUP (?) ; __tm2c1
				__tm2al DB DUP (?) ; __tm2al
				__tm2ah DB DUP (?) ; __tm2ah
				__tm2rp DB DUP (?) ; __tm2rp
				__psc0 DB DUP (?) ; __psc0
				__tbc0 DB DUP (?) ; __tbc0
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				del DB 2 DUP (?) ; del
				__pcs1 DB DUP (?) ; __pcs1
				__pcs2 DB DUP (?) ; __pcs2
